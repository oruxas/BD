'use strict';

var _ = require('lodash');
var path = require('path');
var fse = require('fs-extra');
var phantom = require('phantom');
var cheerio = require('cheerio');
var Promise = require('bluebird');

/**
 * @private
 * @type {RegExp}
 */
var urlRegex = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/i;

var __consoleLog = function (msg, lineNum, sourceId) {
  console.log('CONSOLE: ' + msg + ' (from line #' + lineNum + ' in "' + sourceId + '")');
};
var _prepossessingCSS = function (input, root) {
  var $ = cheerio.load(input);
  var style = '<style type="text/css">\n';

  $('link[rel=stylesheet]').each(function () {
    var stylePath = $(this).attr('href');

    if (urlRegex.test(stylePath)) {
      return true;
    }

    stylePath = path.normalize(root + stylePath);

    $(this).remove();
    style += fse.readFileSync(stylePath, 'utf8');
  });

  style += '</style>';

  $('head').append(style);

  return $.html();
};
var _prepossessingJS = function (input) {
  var $ = cheerio.load(input);
  var scripts = {externals: [], local: []};

  $('script').each(function () {
    var src = $(this).attr('src');
    if (!src) {
      return true;
    }

    if (urlRegex.test(src)) {
      scripts.externals.push(src);
    } else {
      scripts.local.push(path.normalize(path + '/' + src));
    }

    $(this).remove();
  });

  return scripts;
};

function NRender() {
  var that = this;
  var _defaultOptions = {
    paperSize: {orientation: 'portrait', format: 'A4', margin: '5px'},
    viewportSize: {width: 9921, height: 14031, margin: '0px'},
    onConsoleMessage: __consoleLog,
    quality: 100,
    format: 'pdf',
    root: '/'
  };

  that.render = function (input, output, options) {
    if (!input) {
      input = 'The input is empty.';
    }
    if (!options) {
      options = {};
    }
    _.merge(_defaultOptions, options);

    if (!output) {
      output = path.normalize(_defaultOptions.root + '/file.' + _defaultOptions.format);
    } else {
      var tmp = path.parse(output);
      output = tmp.dir + '/';
      var err = fse.ensureDirSync(output);
      if (err) {
        throw new Error(err);
      } else {
        output += tmp.name || 'file';
        output += '.' + _defaultOptions.format;
      }
    }

    var scripts = _prepossessingJS(input, _defaultOptions.root);
    input = _prepossessingCSS(input, _defaultOptions.root);

    return new Promise(function (resolve, reject) {
      var phConfig = [
        '--ignore-ssl-errors=yes',
        '--load-images=yes',
        '--local-to-remote-url-access=true'
      ];

      phantom.create(phConfig).then(function (ph) {
        ph.createPage().then(function (page) {
          var includeJs = [], injectJs = [];

          page.property('onError', function (msg, lineNum, sourceId) {
            ph.exit();
            reject(msg, lineNum, sourceId);
          });
          page.property('onConsoleMessage', function (msg, lineNum, sourceId) {
            return _defaultOptions.onConsoleMessage(msg, lineNum, sourceId);
          });

          for (var i = 0; i < scripts.externals.length; i++) {
            var external = scripts.externals[i];
            includeJs.push(page.includeJs(external));
          }
          for (var i = 0; i < scripts.local.length; i++) {
            var local = scripts.local[i];
            injectJs.push(page.injectJs(local));
          }

          var setConfig = [
            page.property('viewportSize', _defaultOptions.viewportSize),
            page.property('paperSize', _defaultOptions.paperSize),
            Promise.all(includeJs),
            Promise.all(injectJs),
            page.property('content', input)
          ];

          Promise.all(setConfig)
            .then(function () {
              page.render(output, {format: _defaultOptions.format, quality: _defaultOptions.quality})
                .catch(function () {
                  ph.exit();
                  reject(err);
                })
                .then(function () {
                  ph.exit();
                  resolve();
                });
            })
            .catch(function (err) {
              ph.exit();
              reject(err);
            });
        });
      });
    });
  };
  that.renderToBuffer = function (input, options) {
    if (!input) {
      input = 'The input is empty.';
    }
    if (!options) {
      options = {format: 'png'};
    }
    _.merge(_defaultOptions, options);

    var scripts = _prepossessingJS(input, _defaultOptions.root);
    input = _prepossessingCSS(input, _defaultOptions.root);

    return new Promise(function (resolve, reject) {
      var phConfig = [
        '--ignore-ssl-errors=yes',
        '--load-images=yes',
        '--local-to-remote-url-access=true'
      ];

      phantom.create(phConfig).then(function (ph) {
        ph.createPage().then(function (page) {
          var includeJs = [], injectJs = [];

          page.property('onError', function (msg, lineNum, sourceId) {
            ph.exit();
            reject(msg, lineNum, sourceId);
          });
          page.property('onConsoleMessage', function (msg, lineNum, sourceId) {
            return _defaultOptions.onConsoleMessage(msg, lineNum, sourceId);
          });

          for (var i = 0; i < scripts.externals.length; i++) {
            var external = scripts.externals[i];
            includeJs.push(page.includeJs(external));
          }
          for (var i = 0; i < scripts.local.length; i++) {
            var local = scripts.local[i];
            injectJs.push(page.injectJs(local));
          }

          var setConfig = [
            page.property('viewportSize', _defaultOptions.viewportSize),
            page.property('paperSize', _defaultOptions.paperSize),
            Promise.all(includeJs),
            Promise.all(injectJs),
            page.property('content', input)
          ];

          Promise.all(setConfig)
            .then(function () {
              page.renderBase64(_defaultOptions.format)
                .catch(function () {
                  ph.exit();
                  reject(err);
                })
                .then(function (buffer) {
                  ph.exit();
                  resolve(buffer);
                });
            })
            .catch(function (err) {
              ph.exit();
              reject(err);
            });
        });
      });
    });
  };
}

module.exports = new NRender();

